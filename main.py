import telebot
import time
from datetime import datetime, timedelta
import random
import pytz
import requests
from bs4 import BeautifulSoup

# ‚úÖ ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ Bot Token ‡¶ì Chat ID
BOT_TOKEN = '8180362644:AAGtwc8hDrHkJ6cMcc3-Ioz9Hkn0cF7VD_w'
CHAT_ID = '6971835734'

bot = telebot.TeleBot(BOT_TOKEN)

# ‚úÖ Timezone ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶¶‡ßá‡¶∂ ‡¶ü‡¶æ‡¶á‡¶Æ ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡ßü‡ßÄ (UTC+6)
bd_timezone = pytz.timezone("Asia/Dhaka")

# ‚úÖ Real ‡¶è‡¶¨‡¶Ç OTC ‡¶Æ‡¶æ‡¶∞‡ßç‡¶ï‡ßá‡¶ü ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü
REAL_MARKETS = [
    'EUR/USD', 'GBP/USD', 'USD/JPY', 'AUD/USD', 'USD/CAD', 'USD/CHF'
]

OTC_MARKETS = [
    'EUR/USD (OTC)', 'GBP/USD (OTC)', 'USD/JPY (OTC)', 'AUD/USD (OTC)', 'USD/CAD (OTC)', 'USD/CHF (OTC)'
]

# ‚úÖ ‡¶Ü‡¶ó‡ßá‡¶∞ ‡¶∏‡¶ø‡¶ó‡¶®‡¶æ‡¶≤ ‡¶ü‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶ï ‡¶ï‡¶∞‡¶§‡ßá
last_signal_time = None
cooldown_minutes = 1  # ‡¶™‡ßç‡¶∞‡¶§‡¶ø 1 ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü‡ßá ‡¶è‡¶ï‡¶¨‡¶æ‡¶∞ ‡¶∏‡¶ø‡¶ó‡¶®‡¶æ‡¶≤

# ‚úÖ Live 1-Minute Payout Fetch
def fetch_payouts():
    try:
        url = "https://market-qx.pro/trade"
        headers = {
            "User-Agent": "Mozilla/5.0"
        }
        response = requests.get(url, headers=headers, timeout=10)
        soup = BeautifulSoup(response.text, "html.parser")

        payouts = {}
        for row in soup.select('.option'):
            name_elem = row.select_one('.pair-name')
            payout_elem = row.select_one('.percent')
            if name_elem and payout_elem:
                name = name_elem.text.strip()
                percent_text = payout_elem.text.strip().replace('%', '')
                try:
                    percent = int(percent_text)
                    payouts[name] = percent
                except:
                    continue
        return payouts
    except Exception as e:
        print("‚ùå Payout Fetch Error:", e)
        return {}

# ‚úÖ Market ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® (payout ‚â• 75%)
def select_market():
    payouts = fetch_payouts()
    eligible_markets = []

    now = datetime.now(bd_timezone)
    weekday = now.weekday()
    hour = now.hour
    is_real = weekday < 5 and 3 <= hour <= 23

    market_list = REAL_MARKETS if is_real else OTC_MARKETS

    for market in market_list:
        payout = payouts.get(market, 0)
        if payout >= 75:
            eligible_markets.append((market, payout))

    if eligible_markets:
        return random.choice(eligible_markets)
    else:
        return None

# ‚úÖ Signal ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ
def generate_signal():
    global last_signal_time
    now = datetime.now(bd_timezone)

    if last_signal_time and (now - last_signal_time) < timedelta(minutes=cooldown_minutes):
        return None

    result = select_market()
    if result is None:
        return "‚ùå 75%+ payout ‡¶Æ‡¶æ‡¶∞‡ßç‡¶ï‡ßá‡¶ü ‡¶®‡ßá‡¶á ‡¶è‡¶ñ‡¶®‡•§ ‡¶™‡¶∞‡ßá ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§"

    market, payout = result
    signal = random.choice(['UP', 'DOWN'])
    accuracy = random.randint(91, 97)
    entry_time = (now + timedelta(minutes=1)).strftime('%H:%M')
    expire_time = (now + timedelta(minutes=2)).strftime('%H:%M')

    last_signal_time = now

    return f"""üìä AI Filtered Signal
‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
ü™ô Market: {market}
üí∞ Payout: {payout}%
‚è∞ Timeframe: 1M
üöÄ Entry Time: {entry_time}
‚ùå Expiration: {expire_time}
üìà Signal: {signal}
üéØ Accuracy: {accuracy}%
‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
‚ö† Execute Manually.
"""

# ‚úÖ Command Handler
@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    bot.reply_to(message, "‚úÖ ‡¶Ü‡¶Æ‡¶ø ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ AI Signal Bot!\n\nüëâ ‡¶®‡¶§‡ßÅ‡¶® ‡¶∏‡¶ø‡¶ó‡¶®‡¶æ‡¶≤ ‡¶™‡ßá‡¶§‡ßá /signal ‡¶≤‡¶ø‡¶ñ‡ßã‡•§")

@bot.message_handler(commands=['signal'])
def send_signal(message):
    signal_msg = generate_signal()
    if signal_msg:
        bot.send_message(message.chat.id, signal_msg)
    else:
        bot.send_message(message.chat.id, "üïê Cooldown ‡¶ö‡¶≤‡¶õ‡ßá‡•§ ‡ßß ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü ‡¶™‡¶∞ ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")

# ‚úÖ Auto Startup Message
def start_bot():
    bot.send_message(CHAT_ID, "‚úÖ Signal Bot is now running and monitoring 75%+ payout markets...")

print("ü§ñ AI Quotex Bot is Running...")
start_bot()
bot.infinity_polling()
