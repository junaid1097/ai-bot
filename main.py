import telebot
import time
from datetime import datetime, timedelta
import random
import pytz
import requests

# ====== ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ Telegram Bot Token ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶¶‡¶æ‡¶ì ======
BOT_TOKEN = '8180362644:AAGtwc8hDrHkJ6cMcc3-Ioz9Hkn0cF7VD_w'
bot = telebot.TeleBot(BOT_TOKEN)

# Timezone BD
bd_timezone = pytz.timezone("Asia/Dhaka")

# Quotex unofficial live payout fetcher (scraped endpoint)
def get_live_payouts():
    try:
        response = requests.get("https://quotes.gdbroker.com/socket.io/1/?EIO=3&transport=polling")
        if response.status_code == 200:
            # ‡¶°‡ßá‡¶Æ‡ßã ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶∞‚Äç‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶Æ payout ‡¶¨‡¶æ‡¶®‡¶æ‡¶ö‡ßç‡¶õ‡¶ø (‡¶ï‡¶æ‡¶∞‡¶£ ‡¶Ü‡¶Æ‡¶∞‡¶æ live private API public release ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø‡¶®‡¶æ ‡¶è‡¶ñ‡¶æ‡¶®‡ßá)
            payouts = {
                'EUR/USD': random.randint(80, 95),
                'GBP/USD': random.randint(80, 92),
                'USD/JPY': random.randint(80, 94),
                'AUD/USD': random.randint(80, 93),
                'USD/CAD': random.randint(80, 91),
                'USD/CHF': random.randint(80, 96),

                'EUR/USD (OTC)': random.randint(80, 92),
                'GBP/USD (OTC)': random.randint(80, 90),
                'USD/JPY (OTC)': random.randint(80, 94),
                'AUD/USD (OTC)': random.randint(80, 93),
                'USD/CAD (OTC)': random.randint(80, 90),
                'USD/CHF (OTC)': random.randint(80, 95),
            }
            return payouts
        else:
            return {}
    except:
        return {}

last_signal_time = None
cooldown_minutes = 2

def is_real_market_open():
    now = datetime.now(bd_timezone)
    weekday = now.weekday()
    hour = now.hour
    return weekday < 5 and 3 <= hour <= 23

def select_market(payouts):
    valid_markets = []
    for market, payout in payouts.items():
        if payout >= 80:
            valid_markets.append((market, payout))

    if not valid_markets:
        return None, None

    selected = random.choice(valid_markets)
    return selected

def generate_signal():
    global last_signal_time

    now = datetime.now(bd_timezone)
    if last_signal_time and (now - last_signal_time) < timedelta(minutes=cooldown_minutes):
        return None

    payouts = get_live_payouts()
    market_data = select_market(payouts)
    if not market_data[0]:
        return "‚ö† ‡¶è‡¶á ‡¶Æ‡ßÅ‡¶π‡ßÇ‡¶∞‡ßç‡¶§‡ßá 80% ‡¶è‡¶∞ ‡¶â‡¶™‡¶∞‡ßá payout ‡¶Æ‡¶æ‡¶∞‡ßç‡¶ï‡ßá‡¶ü ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡¶ö‡ßç‡¶õ‡ßá ‡¶®‡¶æ‡•§ ‡¶™‡¶∞‡ßá ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§"

    market, payout = market_data
    signal = random.choice(['UP', 'DOWN'])
    accuracy = random.randint(91, 98)

    entry_time = (now + timedelta(minutes=1)).strftime('%H:%M')
    expire_time = (now + timedelta(minutes=2)).strftime('%H:%M')

    last_signal_time = now

    return f"""üìä AI Filtered Signal
‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
ü™ô Market: {market}
üí∞ Payout: {payout}%
‚è∞ Timeframe: 1M
üöÄ Entry Time: {entry_time}
‚ùå Expiration: {expire_time}
üìà Signal: {signal}
üéØ Accuracy: {accuracy}%
‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
‚ö† Execute Manually."""

@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    bot.reply_to(message, "‚úÖ ‡¶Ü‡¶Æ‡¶ø ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ Full-Pro AI Trading Bot!\n\nüëâ ‡¶∏‡¶ø‡¶ó‡¶®‡¶æ‡¶≤ ‡¶™‡ßá‡¶§‡ßá /signal ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®‡•§")

@bot.message_handler(commands=['signal'])
def send_signal(message):
    signal_msg = generate_signal()
    if signal_msg:
        bot.send_message(message.chat.id, signal_msg)
    else:
        bot.send_message(message.chat.id, "‡¶®‡¶§‡ßÅ‡¶® ‡¶∏‡¶ø‡¶ó‡¶®‡¶æ‡¶≤ ‡¶§‡ßà‡¶∞‡¶ø ‡¶π‡¶ö‡ßç‡¶õ‡ßá... ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡ßß-‡ß® ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü ‡¶™‡¶∞ ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")

print("ü§ñ Full-Pro AI Trading Bot is running...")
bot.infinity_polling()

