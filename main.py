import telebot
import time
from datetime import datetime, timedelta
import random

# ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ Bot Token ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶¨‡¶∏‡¶æ‡¶ì
BOT_TOKEN = '8180362644:AAGtwc8hDrHkJ6cMcc3-Ioz9Hkn0cF7VD_w'

bot = telebot.TeleBot(BOT_TOKEN)

# Market list - ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶¶‡ßá‡ßü‡¶æ OTC ‡¶Ü‡¶∞ Real Market ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ ‡¶ï‡¶∞‡ßá ‡¶¶‡ßá‡ßü‡¶æ
REAL_MARKETS = [
    'EUR/USD', 'GBP/USD', 'USD/JPY', 'AUD/USD', 'USD/CAD', 'USD/CHF',
    # ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶Ü‡¶∞‡ßã ‡¶∞‡¶ø‡ßü‡ßá‡¶≤ ‡¶Æ‡¶æ‡¶∞‡ßç‡¶ï‡ßá‡¶ü ‡¶è‡¶° ‡¶ï‡¶∞‡ßã ‡¶Ø‡¶¶‡¶ø ‡¶•‡¶æ‡¶ï‡ßá
]

OTC_MARKETS = [
    'EUR/USD (OTC)', 'GBP/NZD (OTC)', 'GBP/USD (OTC)', 'USD/DZD (OTC)',
    'NZD/CAD (OTC)', 'AUD/NZD (OTC)', 'NZD/USD (OTC)', 'USD/BDT (OTC)',
    'AUD/CHF (OTC)', 'NZD/CHF (OTC)', 'AUD/CAD (OTC)', 'CAD/CHF (OTC)',
    'CAD/JPY (OTC)', 'GBP/JPY (OTC)', 'USD/ZAR (OTC)', 'CHF/JPY (OTC)',
    'USD/COP (OTC)', 'EUR/AUD (OTC)', 'EUR/CAD (OTC)', 'USD/ARS (OTC)',
    'USD/JPY (OTC)', 'EUR/GBP (OTC)', 'EUR/JPY (OTC)', 'EUR/USD (OTC)',
    'GBP/AUD (OTC)', 'USD/NGN (OTC)', 'USD/PKR (OTC)', 'AUD/JPY (OTC)',
    'EUR/CHF (OTC)', 'NZD/JPY (OTC)', 'USD/CAD (OTC)', 'USD/PHP (OTC)',
    'USD/TRY (OTC)', 'AUD/USD (OTC)', 'USD/BRL (OTC)', 'EUR/SGD (OTC)',
    'USD/EGP (OTC)', 'USD/IDR (OTC)', 'USD/MXN (OTC)', 'USD/CHF (OTC)',
    'EUR/NZD (OTC)', 'GBP/CHF (OTC)', 'GBP/CAD (OTC)',
]

# ‡¶¨‡ßú ‡¶Æ‡¶æ‡¶∞‡ßç‡¶ï‡ßá‡¶ü ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü, Real ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá, ‡¶§‡¶æ‡¶∞‡¶™‡¶∞ OTC
MARKETS = REAL_MARKETS + OTC_MARKETS

# ‡¶Ü‡¶ó‡ßá‡¶∞ ‡¶∏‡¶ø‡¶ó‡¶®‡ßç‡¶Ø‡¶æ‡¶≤ ‡¶ü‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶ï ‡¶ï‡¶∞‡¶§‡ßá
last_signal_time = None
last_market = None

def generate_signal():
    global last_signal_time, last_market

    now = datetime.utcnow()
    # ‡¶Ü‡¶ó‡ßá‡¶∞ ‡¶∏‡¶ø‡¶ó‡¶®‡ßç‡¶Ø‡¶æ‡¶≤ ‡ßß ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü ‡¶Ü‡¶ó‡ßá ‡¶è‡¶∏‡ßá‡¶õ‡ßá ‡¶ï‡¶ø‡¶®‡¶æ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶¨‡ßã
    if last_signal_time and (now - last_signal_time) < timedelta(minutes=1):
        return None  # ‡ßß ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü‡ßá‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá‡¶á ‡¶®‡¶§‡ßÅ‡¶® ‡¶∏‡¶ø‡¶ó‡¶®‡ßç‡¶Ø‡¶æ‡¶≤ ‡¶¶‡¶ø‡¶¨ ‡¶®‡¶æ

    # ‡¶è‡¶¨‡¶æ‡¶∞ ‡¶Æ‡¶æ‡¶∞‡ßç‡¶ï‡ßá‡¶ü ‡¶¨‡¶æ‡¶õ‡¶æ‡¶á ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶≤‡¶ú‡¶ø‡¶ï:
    # ‡¶Ü‡¶ó‡ßá‡¶∞ ‡¶Æ‡¶æ‡¶∞‡ßç‡¶ï‡ßá‡¶ü ‡¶¨‡¶æ‡¶¶ ‡¶¶‡¶ø‡ßü‡ßá ‡¶™‡¶∞‡ßá‡¶∞ ‡¶Æ‡¶æ‡¶∞‡ßç‡¶ï‡ßá‡¶ü‡ßá ‡¶∏‡¶ø‡¶ó‡¶®‡ßç‡¶Ø‡¶æ‡¶≤ ‡¶¶‡¶ø‡¶¨‡ßã, ‡¶Ø‡¶¶‡¶ø ‡¶Ü‡¶ó‡ßá‡¶∞ ‡¶Æ‡¶æ‡¶∞‡ßç‡¶ï‡ßá‡¶ü None ‡¶π‡ßü, ‡¶™‡ßç‡¶∞‡¶•‡¶Æ ‡¶Æ‡¶æ‡¶∞‡ßç‡¶ï‡ßá‡¶ü ‡¶•‡ßá‡¶ï‡ßá ‡¶∂‡ßÅ‡¶∞‡ßÅ
    if last_market is None:
        market = MARKETS[0]
    else:
        try:
            last_index = MARKETS.index(last_market)
            market = MARKETS[(last_index + 1) % len(MARKETS)]
        except ValueError:
            market = MARKETS[0]  # safety fallback

    # Signal Direction (UP/DOWN) randomly (‡¶§‡ßÅ‡¶Æ‡¶ø AI ‡¶¶‡¶ø‡ßü‡ßá ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßã)
    signal = random.choice(['UP', 'DOWN'])

    # Accuracy 90% ‡¶è‡¶∞ ‡¶â‡¶™‡¶∞‡ßá ‡¶ß‡¶∞‡ßá ‡¶®‡¶ø‡¶ö‡ßç‡¶õ‡¶ø
    accuracy = random.randint(90, 98)

    # Entry time: ‡¶è‡¶ñ‡¶® ‡¶•‡ßá‡¶ï‡ßá 1 ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü ‡¶™‡¶∞
    entry_time = (now + timedelta(minutes=1)).strftime('%H:%M')

    # Expire time: entry time ‡¶•‡ßá‡¶ï‡ßá 1 ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü ‡¶™‡¶∞
    expire_time = (now + timedelta(minutes=2)).strftime('%H:%M')

    last_signal_time = now
    last_market = market

    return f"""üìà Market: {market}
‚è≥ Timeframe: 1M
üöÄ Entry Time: {entry_time}
‚è∞ Expiration Time: {expire_time}
üìä Signal: {signal}
üéØ Accuracy: {accuracy}% (Non-MTG)
"""

@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    bot.reply_to(message, "‡¶π‡ßç‡¶Ø‡¶æ‡¶≤‡ßã! ‡¶Ü‡¶Æ‡¶ø ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ AI ‡¶ü‡ßç‡¶∞‡ßá‡¶°‡¶ø‡¶Ç ‡¶∏‡¶ø‡¶ó‡¶®‡ßç‡¶Ø‡¶æ‡¶≤ ‡¶¨‡¶ü‡•§ ‡¶∏‡¶ø‡¶ó‡¶®‡ßç‡¶Ø‡¶æ‡¶≤ ‡¶™‡ßá‡¶§‡ßá /signal ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶¶‡¶ø‡¶®‡•§")

@bot.message_handler(commands=['signal'])
def send_signal(message):
    signal_msg = generate_signal()
    if signal_msg:
        bot.send_message(message.chat.id, signal_msg)
    else:
        bot.send_message(message.chat.id, "‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶è‡¶ï‡¶ü‡ßÅ ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®, ‡¶®‡¶§‡ßÅ‡¶® ‡¶∏‡¶ø‡¶ó‡¶®‡ßç‡¶Ø‡¶æ‡¶≤ ‡¶§‡ßà‡¶∞‡¶ø ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")

print("Bot is running...")
bot.infinity_polling()

